<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eschocolat</title>
  
  <subtitle>Writing Developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://eschocolat.me/"/>
  <updated>2018-10-24T17:39:46.393Z</updated>
  <id>https://eschocolat.me/</id>
  
  <author>
    <name>eschocolat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NAS 외부 접속 https 지원하기</title>
    <link href="https://eschocolat.me/support-nas-external-connection-https/"/>
    <id>https://eschocolat.me/support-nas-external-connection-https/</id>
    <published>2017-03-04T19:06:35.000Z</published>
    <updated>2018-10-24T17:39:46.393Z</updated>
    
    <content type="html"><![CDATA[<p>저렴한 NAS를 찾다가 작년부터 IPTIME의 NAS-IIe를 사용해 왔다. 기존에 ipdisk 도메인을 이용하여 외부 접속을 사용하고 있었는데 크롬에서 HTTPS를 지원하지 않으면 경고 메시지를 띄우는 게 마음에 걸렸다. ipdisk 도메인은 내 소유가 아니라서 https를 지원하려면 내가 소유한 서브도메인으로 SSL 프록시를 하는게 좋을 것 같아 시도해 보았다.</p><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><a href="#ssl-cert">SSL 클라이언트 인증서 발급</a></li><li><a href="#nginx-ssl">NGINX로 SSL 리버스 프록시 설정</a></li><li><a href="#upstream">Upstream 설정</a></li><li><a href="#example">완성된 NGINX 설정 예시</a></li></ul><h2 id="SSL-클라이언트-인증서-발급"><a href="#SSL-클라이언트-인증서-발급" class="headerlink" title="SSL 클라이언트 인증서 발급"></a><a name="ssl-cert"></a>SSL 클라이언트 인증서 발급</h2><p>보안서버를 구축하려면 https를 지원해야 하고 https를 지원하려면 SSL 인증서라는 것을 발급받아야 한다. 보통 SSL 인증서는 유료이고 가격이 꽤 비싸다. 그러나 https의 확산을 위해 SSL 인증서를 무료로 보급하는 프로젝트가 있었는데, 그게 바로 <u><a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a></u>다.  </p><p>리눅스에서는 Let’s Encrypt에서 제공하는 소프트웨어 클라이언트인 letsencrypt를 사용하면 쉽고 편하게 적용할 수 있다. 그러나 무료인 대신 갱신주기가 유료서비스에 비해 짧고, 만료되기 전에 인증서를 갱신해야 한다.</p><p>Let’s Encrypt 인증서를 발급 받는 자세한 방법은 Outsider님의 글을 참고하길 바란다.</p><p><strong><a href="https://blog.outsider.ne.kr/1178" target="_blank" rel="noopener">Lets’ Encrypt로 무료로 HTTPS 지원하기, Outsider’s Dev Story</a></strong></p><h2 id="SSL-리버스-프록시-설정"><a href="#SSL-리버스-프록시-설정" class="headerlink" title="SSL 리버스 프록시 설정"></a><a name="nginx-ssl"></a>SSL 리버스 프록시 설정</h2><p>알아 보니 NGINX로 SSL 리버스 프록시를 지원하는 게 가장 빠르고 쉬운 방법 같았다.</p><blockquote><p>리버스 프록시란<br>클라이언트는 프록시로 요청하고,<br>프록시가 배후(reverse)의 서버로부터 데이터를 가져오는 방식을 말한다.</p></blockquote><img src="/support-nas-external-connection-https/proxy.png" title="reverse_proxy"><p>앞 단 서버를 프록시로 두고 내부에서 데이터를 주고 받고, 리퀘스트를 받아서 넘겨 주는 구조다. NGINX애서는 리버스 프록시를 어떻게 설정해야 할까? 먼저 앞서 발급받은 SSL 클라이언트 인증서 및 NGINX 인증할 키를 추가한다.  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>선택사항으로 SSL 프로토콜과 암호를 지정할 수 있다.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> <span class="string">'EDES-EFSF-EFFD~~~~~~~~~~~~~~~~~~~~~~~~~~'</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 프록시 설정을 추가한다.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>    X-Real-IP  <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>    X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>    Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://192.168.0.100/;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>프록시 주소는 반드시 내부 주소로 설정해야 한다.</p><h2 id="Upstream-설정"><a href="#Upstream-설정" class="headerlink" title="Upstream 설정"></a><a name="upstream"></a>Upstream 설정</h2><p>앞서 설정한 부분까지만 진행한다면 사실 502 Bad Gate Way 오류가 날 것이다. 프록시만 패스하고 내부에서 통신하는 upstream 서버에 대한 허용은 하지 않았기 때문이다.</p><blockquote><p>upstream이란<br>proxy_pass 지시자를 통해 NGINX가 받은 리퀘스트를 넘겨 줄 서버들을 정의하는 지시자다.</p></blockquote><p>각 upstream 서버는 https 연결을 허용하도록 구성되어야 한다. upstream은 다음과 같이 설정할 수 있다. 추가로 keepalive를 켜서 NGINX와 upstream 서버 간에 불필요한 통신을 최소화한다.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> nas_server &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.100</span>/;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">100</span>; <span class="comment"># keepalive로 유지시키는 최대 커넥션 개수</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 앞서 설정했던 프록시 패스 서버를 upstream 서버로 바꾼다.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://nas_server;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="완성된-NGINX-설정-예시"><a href="#완성된-NGINX-설정-예시" class="headerlink" title="완성된 NGINX 설정 예시"></a><a name="example"></a>완성된 NGINX 설정 예시</h2><p>최종 완성된 NGINX 설정은 다음과 같다.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> nas_server &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.100</span>/;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">100</span>; <span class="comment"># keepalive로 유지시키는 최대 커넥션 개수</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>    X-Real-IP  <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>    X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>    Host <span class="variable">$http_host</span>;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_pass</span>  http://nas_server;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 추가 설정</span></span><br><span class="line">        <span class="attribute">client_max_body_size</span> <span class="number">32M</span>;</span><br><span class="line">        <span class="attribute">client_body_buffer_size</span> <span class="number">512k</span>;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">90</span>;</span><br><span class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">90</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">1200</span>;</span><br><span class="line">        <span class="attribute">proxy_buffers</span> <span class="number">32</span> <span class="number">4k</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># certs sent to the client in SERVER HELLO are concatenated in ssl_certificate</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">1d</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">50m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_tickets</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits</span></span><br><span class="line">    <span class="attribute">ssl_dhparam</span> /etc/letsencrypt/live/eschocolat.me/dhparam.pem;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># intermediate configuration. tweak to your needs.</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> <span class="string">'EDES-EFSF-EFFD~~~~~~~~~~~~~~~~~~~~~~~~~~'</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)</span></span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security max-age=<span class="number">15768000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># OCSP Stapling ---</span></span><br><span class="line">    <span class="comment"># fetch OCSP records from URL in ssl_certificate and cache them</span></span><br><span class="line">    <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_stapling_verify</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">## verify chain of trust of OCSP response using Root CA and Intermediate certs</span></span><br><span class="line">    <span class="attribute">ssl_trusted_certificate</span> /etc/letsencrypt/live/example.com/chain.pem;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">resolver</span> <span class="number">8.8.8.8</span> <span class="number">8.8.4.4</span> valid=<span class="number">86400</span>;</span><br><span class="line">    <span class="attribute">resolver_timeout</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기타 설정은 NGINX의 SSL 설정을 만들어주는 <u><a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/" target="_blank" rel="noopener">Mozilla SSL Configuration Generator</a></u>를 사용했다.<br>서버를 실행하면 외부 접속했을 때 기분 좋은 녹색 자물쇠 표시를 볼 수 있다.  </p><p><img src="./https.png" alt="https"></p><p>NAS https 설정을 하느라 꽤 오랫동안 삽질을 했다.<br>나 같은 사람이 있다면 조금이나마 도움이 되었으면 하는 마음에 부족한 글을 올려 본다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;저렴한 NAS를 찾다가 작년부터 IPTIME의 NAS-IIe를 사용해 왔다. 기존에 ipdisk 도메인을 이용하여 외부 접속을 사용하고 있었는데 크롬에서 HTTPS를 지원하지 않으면 경고 메시지를 띄우는 게 마음에 걸렸다. ipdisk 도메인은 
      
    
    </summary>
    
    
      <category term="NAS" scheme="https://eschocolat.me/tags/NAS/"/>
    
      <category term="https" scheme="https://eschocolat.me/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>내가 개발자가 된 이유</title>
    <link href="https://eschocolat.me/why-i-became-a-developer/"/>
    <id>https://eschocolat.me/why-i-became-a-developer/</id>
    <published>2017-03-02T15:49:06.000Z</published>
    <updated>2018-10-24T17:39:46.375Z</updated>
    
    <content type="html"><![CDATA[<img src="/why-i-became-a-developer/coding.jpg" title="coding"><p>요즘은 포트폴리오 준비에 여념이 없다.<br>하루종일 공부하고 컴퓨터 앞에 앉아 코딩을 한다.<br>쉽지 않다.  </p><p>취업을 준비하면서 이렇게 이력서와 포트폴리오에 공을 들여보는 일은 처음이다. 짧은 경력이라서 경험이 많진 않지만 인턴 취업 때도, 첫 이직 때도 단순히 내가 해 왔던 프로젝트들을 나열한 포트폴리오를 제출했다.</p><p>이번에는 좀 다르다.  </p><p>제대로 기획을 하고 1인 프로젝트로서 제대로 된 작품을 만들어 보고 싶다. 거창하지 않아도 나 스스로 활용하고 계속 사용할 것들을. 물론 포트폴리오를 만드는 궁극적인 목적은 좋은 회사에 취업하기 위해서다. 다만 누이좋고 매부좋고라 하지 않는가. 이왕이면 보여주기 식에 불과한 것이 아니라 진짜 애정을 가지고 만들어 보자는 거다.</p><p>나는 어릴적부터 무언가 꾸물거리면서 만드는 것을 좋아했다. 레고 블럭으로 나만의 놀이공원을 짓는다거나, 글이나 그림으로 상상의 나래를 펼치거나. 나를 표현하는 일에 관심이 많았던 것 같다. 청소년이 되면서 게임이나 티비 등의 다른 길들로 새기는 했지만.</p><p>대학교를 진학하기 전 진로 문제로 고민하던 시기에는 막연히 게임을 만들어 보고 싶다는 생각과 글을 제대로 배우고 싶다는 생각에 컴퓨터공학과와 국문학과 사이에서 많은 고민을 했었다.</p><p>게임을 만드는 것과 글을 쓰는 것. 두가지 모두 나만의 세계를 만드는 작업이라는 부분에서 공통점이 있었다.</p><p>오래 전부터 한 가지 신념이 있다.</p><blockquote><p>사람은 일을 즐겨야 한다.<br>일은 좋아해야 즐길 수 있다.<br>그러므로 사람은 좋아하는 일을 해야 한다.</p></blockquote><p>그렇다면 나는 왜 개발자가 되었을까? 사실 이유는 단순하다.</p><p>나는 그저 소비하는 것보다는 무언가 만들고 사람들에게 보여주는 일을 좋아한다. 그래서 무언가를 만들기 위해 코딩을 시작했다. 사람들에게 보여주기 위한 코딩이 즐겁고 만드는 과정에서 희열을 느낀다.</p><p><span class="red"><strong>나는 코딩이 좋아서 개발자가 되었다.</strong></span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/why-i-became-a-developer/coding.jpg&quot; title=&quot;coding&quot;&gt;
&lt;p&gt;요즘은 포트폴리오 준비에 여념이 없다.&lt;br&gt;하루종일 공부하고 컴퓨터 앞에 앉아 코딩을 한다.&lt;br&gt;쉽지 않다.  &lt;/p&gt;
&lt;p&gt;취
      
    
    </summary>
    
    
      <category term="개발자" scheme="https://eschocolat.me/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>29살, 인생 돌아보기</title>
    <link href="https://eschocolat.me/review-29years-of-life-in-retrospect/"/>
    <id>https://eschocolat.me/review-29years-of-life-in-retrospect/</id>
    <published>2017-03-02T00:40:25.000Z</published>
    <updated>2018-10-24T19:16:47.429Z</updated>
    
    <content type="html"><![CDATA[<img src="/review-29years-of-life-in-retrospect/train.jpg" title="train"><p><span class="blue"><strong>29살의 청춘.</strong></span><br>감사한 일이다. 별 탈 없이 여지껏 무사하게 살아 왔으니. 스물 아홉. 긴 시간을 살아왔다고 말하기엔 민망하지만, 짧지 않은 시간을 살아온 것만은 사실이다. 한 해만 넘기면 나의 20대도 이제 끝이 난다. 아프니까 청춘이랬나. 서른이 되면 왠지 모르게 청춘, 자유, 열정 같은 느낌이 모두 사라져 버릴 것 같다. 하지만 20살이 되고 싶어하던 고등학생 때가 여전히 엊그제 같다, 라고 한다면 무리수겠지.</p><p>서른이라는 이름의 기차를 기다리는 이 시점에서 내가 살아왔던 인생을 한 번 돌아보려고 한다.</p><hr><p>고등학생 때부터 나는 미래에 대한 막연한 확신을 가지고 있었다. 수능은 거의 포기한 상태로 입시를 준비하면서도 어쨌든 대학교는 가게 될 거란 확신이 있었다. 국문학과와 컴퓨터 공학과 사이에서 선택을 고민할 때도 어느 과를 가든 확신이 있었다. 대학교 1학년 때도 나는 20대 후반에 들어서면 결혼해서 어엿한 가장이 되어 있을거란 꿈을 꾸었다. 내 인생에서 지워 버리고 싶은 1학년 한 해 동안 1살 위 선배에게 술자리로 인해 괴롭힘을 당해서 휴학과 동시에 재수를 선택 했을 때도 막연히 좋은 대학에 갈거란 확신을 가졌다.<br>어리석었다. 현실은 호락호락 하지 않았다. 대학교는 가게 되었지만 과 생활에 적응하기가 어려웠고, 재수를 선택했지만 노는 데만 정신이 팔려 있었다. 20대 후반인 지금 결혼은 커녕 20살 이후로 연애해 본 적이 없다.</p><p>처참하게 재수를 실패하고 군대를 다녀왔다. 군대에서도 이전 교회에서도 관계에서 상처를 받은 나는 자존감이 바닥이었다. 나에게는 중학교 친구들 밖에 없었다. 전역하자마자 자취를 시작함과 동시에 대학교를 복학하니 아는 사람이 아무도 없어 혼자 다니게 될까 두려웠다. 그래서 선택한 곳이 기독교 동아리였다.<br>동아리 활동을 하면서 좋은 사람들을 많이 만나게 되었다. 동아리 특성 상 거의 동아리방에서 함께 사는 느낌이라서 그들은 내가 가장 솔직해질 수 있는, 가장 사랑하는 사람들이 되었다. 차츰 자존감이 회복되어 같은 과 친구들도 많이 알게 되면서 대학교 생활이 즐거워졌다. 나름대로 정신차리고 공부해서 1학년 때 죽을 쒔던 성적을 만회하고자 노력했다.</p><p>25살, 26살. 대학교 3, 4학년 시절은 게임, 공부, 알바, 동아리, 취업 준비가 전부였다. 노는 데 더 시간을 많이 할애하긴 했지만 학과 공부, 알바, 동아리 활동 등으로 바쁘게 지냈다. 정말 어느 때보다도 열심히 열정적으로 삶을 살아낸 시간이었다. 돌아보면 가장 대학생답게 시간을 보냈던 이 시기가 가장 그리운 순간임이 틀림없다.<br>수많은 친구들과 정을 나누었고 술을 마시지 않아도 재미나게 놀았다. 그 때는 몰랐지만 다시는 돌아오지 않을 소중한 시간들이었다.</p><hr><p>2015년 27살, 아쉬움을 뒤로 한 채 졸업을 했다. 자취방을 정리하고 추억을 남겨둔 대학교 지역을 떠났다.<br>졸업 후 2개월 뒤 본격적으로 사회의 문턱에 들어섰다. 생각했던 것보다 사회는 만만치 않았다. 지원한 마흔 개 회사 중 드디어 합격한 첫 직장에서 3개월의 인턴 기간, 고생이란 고생은 다하고 이렇게 살면 무슨 의미가 있나 싶어 뛰쳐 나오기로 결정한다. 그리고 2주 만에 집에서 그리 멀지 않은 스타트업 직장에 취직해 인턴이 아닌 진짜 직장인이 되었다.</p><img src="/review-29years-of-life-in-retrospect/jiufun.jpg" title="jiufun"><p>1년 1개월의 재직 기간 중 휴가를 내고 다녀온 대만 여행. 스물 일곱이 되어서야 교회 비전트립이 아닌 진짜 해외 여행을 다녀왔다. 10년지기 친구와 단 둘이 떠난 여행에서 많은 것을 보고 느꼈다. 해외 여행을 안 가본 사람은 있어도 한 번만 다녀온 사람은 없다라는 말이 절실하게 와 닿았다. 언제든 기회가 되면 다시 떠나고 싶었다.</p><p>1년 동안 회사를 다니면서 새로운 것을 듣고 배웠다. 내가 성장하길 바라는 팀장님 덕분에 많은 기술들을 접할 수 있었고, 마음껏 공부할 수 있었다. 기성 회사였으면 꿈도 꾸지 못할 일이었다. 덕분에 1년 여의 짧은 경력이 경험하기 힘든 경험을 했다. 대학교 때 내가 뭘 배웠나 안타까웠을 정도로 개발자로서 많은 성장을 했다. 팀장님께 감사할 따름이다. 또한 특이한 구조의 스타트업이라 별의별 일은 다 겪어 본 것 같다. 이 곳에 적기 힘든 여러가지 일을 겪고 나서 느낀 점은 어딜 가든 사람이 제일 중요하다는 것이었다.</p><p>그리고 조금은 지친 상태로 1년 여의 경력을 급하게 마무리 했다. 공부도 하고 싶었고, 여행도 하고 싶었지만 당장은 쉬고 싶은 마음이 컸다. 그래서 퇴사 후 3개월 동안 푹 쉬면서 무기력해진 마음을 극복하려 노력했다.<br>그러다 많은 고민 끝에 조금이나마 모은 돈과 퇴직금을 합쳐 한달 가량의 유럽 여행을 떠나기로 결정했다. 내 인생 최대의 도전이었다. 영어도 제대로 할 줄 모르고 친구와 함께 떠나는 것도 아닌 혼자 모든 것을 해결해야 하는 여행. 두려운 마음이 앞섰지만 20대에 반드시 해 보고 싶었던 유럽 여행을 지금 아니면 언제 해보겠나 싶어 도전하기로 결심했다.</p><img src="/review-29years-of-life-in-retrospect/eiffel.jpg" title="eiffel"><p>2016년 12월 초에 시작해 2017년 1월 초에 돌아오는 일정이었다. 준비하는 기간이 굉장히 힘들었다. 급하게 2주 남겨 두고 결정했기 때문이기도 하고 생각 보다 신경써야 할 일이 많았다. 마음이 분주했다.<br>허나 여행을 준비하며 엄청난 설렘 사이에 낀 불안감을 적당히 포장하고 스스로를 달랠 만큼의 여유가 조금씩 생겨나기 시작했다. 그 조금의 여유 속에서 또다시 내 여행에 대한 막연한 확신이 들어 나는 그 긴장감을 즐기기로 했다. 우선 가고 싶은 나라들을 적고, 그 나라들에 속한 도시들을 적어 여행 경로를 짜고 수정하는 일을 반복했다. 처음 가는 유럽이라서 아는 것도 많이 없었지만 주로 내가 좋아하는 역사, 작품, 영화 속 배경에 부합하는 장소들이 추려졌다.</p><p>젠가에서 블록을 빼내 듯 점점 도시들을 좁혀 나갔다. 무작정 떠나는 여행이라서 무언가 삶의 의미를 찾는다던지, 그런 느낌은 아니지만 적어도 나를 확장할 수 있는 여행이 되면 좋겠다는 생각을 했다. 인간의 역사와 자연의 위대함 속에서 신나게 즐기다 오기로 다짐했다.</p><p>결과적으로 한달 간 유럽 여행을 다녀오길 잘했다. 혼자 여행을 하면서 좋은 사람들도 만나고 나 자신에 대한 확신과 자신감이 생긴 것 같다. 자존감이 높아졌다. 에펠탑을 본다고 인생이 바뀌는 것도, 인생이 특별해지는 것도 아니다. 하지만 한 번 사는 인생에 있어 그 무엇과도 바꿀 수 없는 경험인 것만은 분명했다. 세상을 바라보는 시각이 달라지고 견문이 넓어짐을 느꼈다.</p><p>돌이켜 보면 삶의 방향을 잡게 해 준 20대였던 것 같다.</p><blockquote><p>20대의 끝자락에서 </p></blockquote><p>내 나이 29살.<br>마음이 서서히 조급해지는 나이.<br>‘결혼’, ‘가정’, ‘배우자’라는 단어가 피부에 와닿는 나이.</p><p>그러나 조바심을 내기 보다는 천천히, 나를 준비하고 있음을 느낀다.</p><p>올 해에는 거창한 목표보다는 더 많은 경험, 더 많은 사람들을 만나고 넉넉한 마음으로 행복하게 사는 것이 목표다. 언젠가 역경이 와도, 고난을 넉넉히 받아내는 사람으로 그렇게 성장해 나갈거라 확신한다.</p><p>20대의 마지막 29살 한 해, 하루하루가 담아낼 것, 감사할 일들로 가득한 매일이 되길!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/review-29years-of-life-in-retrospect/train.jpg&quot; title=&quot;train&quot;&gt;
&lt;p&gt;&lt;span class=&quot;blue&quot;&gt;&lt;strong&gt;29살의 청춘.&lt;/strong&gt;&lt;/span&gt;&lt;br&gt;감사한 일이다.
      
    
    </summary>
    
    
      <category term="회고" scheme="https://eschocolat.me/tags/%ED%9A%8C%EA%B3%A0/"/>
    
  </entry>
  
</feed>
